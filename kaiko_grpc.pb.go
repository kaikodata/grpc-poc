// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: kaiko.proto

package kaiko

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KaikoClient is the client API for Kaiko service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KaikoClient interface {
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type kaikoClient struct {
	cc grpc.ClientConnInterface
}

func NewKaikoClient(cc grpc.ClientConnInterface) KaikoClient {
	return &kaikoClient{cc}
}

func (c *kaikoClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/kaiko.Kaiko/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KaikoServer is the server API for Kaiko service.
// All implementations must embed UnimplementedKaikoServer
// for forward compatibility
type KaikoServer interface {
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	mustEmbedUnimplementedKaikoServer()
}

// UnimplementedKaikoServer must be embedded to have forward compatible implementations.
type UnimplementedKaikoServer struct {
}

func (UnimplementedKaikoServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedKaikoServer) mustEmbedUnimplementedKaikoServer() {}

// UnsafeKaikoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KaikoServer will
// result in compilation errors.
type UnsafeKaikoServer interface {
	mustEmbedUnimplementedKaikoServer()
}

func RegisterKaikoServer(s grpc.ServiceRegistrar, srv KaikoServer) {
	s.RegisterService(&Kaiko_ServiceDesc, srv)
}

func _Kaiko_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaikoServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiko.Kaiko/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaikoServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kaiko_ServiceDesc is the grpc.ServiceDesc for Kaiko service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kaiko_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaiko.Kaiko",
	HandlerType: (*KaikoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Kaiko_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaiko.proto",
}
